buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mc_version}-${mod_version}"
group = maven_group
archivesBaseName = archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: "parchment", version: "${mappings_version}-${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        name 'Theillusivec4 Maven'
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation  fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    implementation  fg.deobf("io.github.edwinmindcraft:calio-forge:${mc_version}-${calio_version}")
    implementation  fg.deobf("io.github.edwinmindcraft:apoli-forge:${mc_version}-${apoli_version}")
    implementation  fg.deobf("io.github.edwinmindcraft:origins-forge:${mc_version}-${origins_version}")

    compileOnly     fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly     fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    compileOnly     fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}:api")
    runtimeOnly     fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    runtimeOnly     fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
    runtimeOnly     fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation  fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:slim")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand 'mod_id'                 : mod_id,
               'mod_version'            : mod_version,
               'fml_requirements'       : fml_requirements,
               'forge_requirements'     : forge_requirements,
               'mc_requirements'        : mc_requirements,
               'origins_requirements'   : origins_requirements
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_id,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${projectDir}/mcmodsrepo"
        }
    }
}
